{
    "pipes": [
        {
            "name": "ErrorsPipe",
            "id": "pipe-ErrorsPipe-c3bc2cb401bd7fc9aeac939ecfd33b417624fcfdcdd77f31c64dd1e7b2b73b6c6d1a8634338eb6e1e48238faea427d9461bca9768128e1b8cc336d02a8e13ec6",
            "file": "src/app/shared/pipes/error.pipe.ts",
            "type": "pipe",
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "properties": [],
            "methods": [
                {
                    "name": "transform",
                    "args": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string[]>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "errors",
                            "type": "ValidationErrors",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "ngname": "errors",
            "sourceCode": "import { Pipe, PipeTransform } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\nimport { TranslocoService } from '@ngneat/transloco';\r\nimport { combineLatest, Observable } from 'rxjs';\r\n\r\n@Pipe({\r\n  name: 'errors'\r\n})\r\nexport class ErrorsPipe implements PipeTransform {\r\n  constructor(private translocoService: TranslocoService) {}\r\n\r\n  transform(errors: ValidationErrors): Observable<string[]> {\r\n    return combineLatest(\r\n      Object.keys(errors).map(\r\n        (key: string) => this.translocoService.selectTranslate(`error.${key}`, errors[key])\r\n      )\r\n    );\r\n  }\r\n}\r\n"
        }
    ],
    "interfaces": [
        {
            "name": "Dictionary",
            "id": "interface-Dictionary-92c55890d0bfaed5bf8f08794360379b8dd60bd3e9451da84b3e18a06bd0206b922495a846adf8808a2f274e666ab49ba4240cade477dfbf971adcd88cbcb76c",
            "file": "src/app/entities/utils.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface Dictionary<T> {\r\n  [key: string]: T;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-92c55890d0bfaed5bf8f08794360379b8dd60bd3e9451da84b3e18a06bd0206b922495a846adf8808a2f274e666ab49ba4240cade477dfbf971adcd88cbcb76c",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "T",
                    "line": 1,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IFormConfig",
            "id": "interface-IFormConfig-d1f927c95ac779e76fcf4e28d0a8c5ac55a219fcf133afa16374534245618ca3b473383d9eedccb2b94c27cad7865458bf29eb128e2e2a51e795089e86fcbd06",
            "file": "src/app/entities/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, FormControl } from \"@angular/forms\";\r\n\r\nexport enum AuthEnum {\r\n  LOGIN = 'login',\r\n  REGISTRATION = 'registration',\r\n  DEFAULT = 'default',\r\n}\r\n\r\nexport interface IFormControlValidatorsConfig {\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  regExp?: RegExp;\r\n}\r\n\r\n\r\nexport interface IFormConfig {\r\n  [key: string]: AbstractControl;\r\n}\r\n\r\nexport interface LoginForm {\r\n  login: FormControl<string | null>;\r\n  password: FormControl<string | null>;\r\n}\r\n\r\nexport interface RegistrationForm extends LoginForm {\r\n  passwordConfirm: FormControl<boolean | null>;\r\n  privacyPolicy: FormControl<boolean>;\r\n  offersInformation?: FormControl<boolean>;\r\n}\r\n",
            "properties": [],
            "indexSignatures": [
                {
                    "id": "index-declaration-d1f927c95ac779e76fcf4e28d0a8c5ac55a219fcf133afa16374534245618ca3b473383d9eedccb2b94c27cad7865458bf29eb128e2e2a51e795089e86fcbd06",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "AbstractControl",
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "kind": 175,
            "methods": []
        },
        {
            "name": "IFormControlValidatorsConfig",
            "id": "interface-IFormControlValidatorsConfig-d1f927c95ac779e76fcf4e28d0a8c5ac55a219fcf133afa16374534245618ca3b473383d9eedccb2b94c27cad7865458bf29eb128e2e2a51e795089e86fcbd06",
            "file": "src/app/entities/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, FormControl } from \"@angular/forms\";\r\n\r\nexport enum AuthEnum {\r\n  LOGIN = 'login',\r\n  REGISTRATION = 'registration',\r\n  DEFAULT = 'default',\r\n}\r\n\r\nexport interface IFormControlValidatorsConfig {\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  regExp?: RegExp;\r\n}\r\n\r\n\r\nexport interface IFormConfig {\r\n  [key: string]: AbstractControl;\r\n}\r\n\r\nexport interface LoginForm {\r\n  login: FormControl<string | null>;\r\n  password: FormControl<string | null>;\r\n}\r\n\r\nexport interface RegistrationForm extends LoginForm {\r\n  passwordConfirm: FormControl<boolean | null>;\r\n  privacyPolicy: FormControl<boolean>;\r\n  offersInformation?: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "maxLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "minLength",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "regExp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RegExp",
                    "optional": true,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-d1f927c95ac779e76fcf4e28d0a8c5ac55a219fcf133afa16374534245618ca3b473383d9eedccb2b94c27cad7865458bf29eb128e2e2a51e795089e86fcbd06",
            "file": "src/app/entities/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, FormControl } from \"@angular/forms\";\r\n\r\nexport enum AuthEnum {\r\n  LOGIN = 'login',\r\n  REGISTRATION = 'registration',\r\n  DEFAULT = 'default',\r\n}\r\n\r\nexport interface IFormControlValidatorsConfig {\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  regExp?: RegExp;\r\n}\r\n\r\n\r\nexport interface IFormConfig {\r\n  [key: string]: AbstractControl;\r\n}\r\n\r\nexport interface LoginForm {\r\n  login: FormControl<string | null>;\r\n  password: FormControl<string | null>;\r\n}\r\n\r\nexport interface RegistrationForm extends LoginForm {\r\n  passwordConfirm: FormControl<boolean | null>;\r\n  privacyPolicy: FormControl<boolean>;\r\n  offersInformation?: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string | null>",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RegistrationForm",
            "id": "interface-RegistrationForm-d1f927c95ac779e76fcf4e28d0a8c5ac55a219fcf133afa16374534245618ca3b473383d9eedccb2b94c27cad7865458bf29eb128e2e2a51e795089e86fcbd06",
            "file": "src/app/entities/auth.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { AbstractControl, FormControl } from \"@angular/forms\";\r\n\r\nexport enum AuthEnum {\r\n  LOGIN = 'login',\r\n  REGISTRATION = 'registration',\r\n  DEFAULT = 'default',\r\n}\r\n\r\nexport interface IFormControlValidatorsConfig {\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  regExp?: RegExp;\r\n}\r\n\r\n\r\nexport interface IFormConfig {\r\n  [key: string]: AbstractControl;\r\n}\r\n\r\nexport interface LoginForm {\r\n  login: FormControl<string | null>;\r\n  password: FormControl<string | null>;\r\n}\r\n\r\nexport interface RegistrationForm extends LoginForm {\r\n  passwordConfirm: FormControl<boolean | null>;\r\n  privacyPolicy: FormControl<boolean>;\r\n  offersInformation?: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "offersInformation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "passwordConfirm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean | null>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "privacyPolicy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": [],
            "extends": "LoginForm"
        }
    ],
    "injectables": [
        {
            "name": "AppPreloadingStrategyService",
            "id": "injectable-AppPreloadingStrategyService-2c2fa1231e5eefea3bf55b651e9dcf18e37d826fcefc86ac9a6455efb8376e7641cf7c07221a9054d8ec845f8510fe703824976bf16a4655df3f95024ac50753",
            "file": "src/app/shared/services/app-preloading-strategy.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "preload",
                    "args": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "load",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 7,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "Route",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "load",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { PreloadingStrategy, Route } from '@angular/router';\r\nimport { Observable, of } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AppPreloadingStrategyService implements PreloadingStrategy {\r\n  preload(route: Route, load: () => Observable<any>): Observable<any> {\r\n    return !!route?.data?.['preload'] ? load() : of(null);\r\n  }\r\n}\r\n",
            "type": "injectable"
        },
        {
            "name": "AuthFormService",
            "id": "injectable-AuthFormService-66d3536d3454cc12eef2797cad8d518f63f4caaa7e557e60cdf4f908ec60b0fc5edbef0e87c04624908eb1d860274f616aaa0ac1dce7ac49bb2c6a18e32be959",
            "file": "src/app/auth/services/auth-form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getLoginFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl<string | null>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getOffersInformationFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl<boolean>",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPasswordConfirmControl",
                    "args": [
                        {
                            "name": "confirmValidator",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl<boolean | null>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmValidator",
                            "type": "ValidatorFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPasswordFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl<string | null>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getPrivacyPolicyFormControl",
                    "args": [],
                    "optional": false,
                    "returnType": "FormControl<boolean>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { FormControl, ValidatorFn, Validators } from '@angular/forms';\r\nimport { Injectable } from \"@angular/core\";\r\n\r\n@Injectable()\r\nexport class AuthFormService {\r\n  constructor() {}\r\n\r\n  getPasswordConfirmControl(confirmValidator: ValidatorFn): FormControl<boolean | null> {\r\n    return new FormControl(null, [\r\n      Validators.required,\r\n      confirmValidator,\r\n    ]);\r\n  }\r\n\r\n  getPasswordFormControl(): FormControl<string | null> {\r\n    return new FormControl(null, [\r\n      Validators.required,\r\n      Validators.minLength(8),\r\n      Validators.maxLength(20),\r\n    ]);\r\n  }\r\n\r\n  getLoginFormControl(): FormControl<string | null> {\r\n    return new FormControl(null,\r\n      [\r\n        Validators.email,\r\n        Validators.required\r\n      ]\r\n    );\r\n  }\r\n\r\n  getPrivacyPolicyFormControl(): FormControl<boolean> {\r\n    return new FormControl(false, {\r\n      nonNullable: true,\r\n      validators: Validators.required,\r\n    });\r\n  }\r\n\r\n  getOffersInformationFormControl(): FormControl<boolean> {\r\n    return new FormControl(false, { nonNullable: true });\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 5
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-121a2d963cdb89c0a50b6e55e714847a58922643185cd712f2aeda9ca3dc0fa286cb8c165c86dc15a48c57ea5698459b98a75cfe5daed7058f2881e2cead9adf",
            "file": "src/app/shared/services/auth.service.ts",
            "properties": [
                {
                    "name": "authSubject$",
                    "defaultValue": "new BehaviorSubject<boolean>(this.getAuthState())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "BehaviorSubject<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isAuth$",
                    "defaultValue": "this.authSubject$.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<boolean>",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeAuthState",
                    "args": [
                        {
                            "name": "isAuth",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "isAuth",
                            "type": "",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "true",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthState",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { BehaviorSubject, first, map, Observable, tap } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { StorageService } from './session/abstract-session.service';\r\nimport { StorageKeysEnum } from 'src/constants';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class AuthService {\r\n  private authSubject$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(this.getAuthState());\r\n  public isAuth$: Observable<boolean> = this.authSubject$.asObservable();\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private storageService: StorageService,\r\n  ) {}\r\n\r\n  login(): void {\r\n    this.changeAuthState();\r\n  }\r\n\r\n  logout(): void {\r\n    this.changeAuthState(false);\r\n  }\r\n\r\n  register(): void {\r\n    this.changeAuthState();\r\n  }\r\n\r\n  private changeAuthState(isAuth = true): void {\r\n    this.storageService.setItem(StorageKeysEnum.AUTHENTICATION, isAuth);\r\n    this.authSubject$.next(isAuth);\r\n    if (isAuth) {\r\n      this.router.navigate(['']);\r\n    }\r\n  }\r\n\r\n  private getAuthState(): boolean {\r\n    return this.storageService.getItem(StorageKeysEnum.AUTHENTICATION) === 'true';\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "storageService",
                        "type": "StorageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "LocalStorageService",
            "id": "injectable-LocalStorageService-0a716274c7cdeb1f6e948bfbf0454d9aa2c438b173207ff747a4d93aaa515e3fad503a407b83abbac39cb29000455fcec7ff4c4879e4c23cc647b6cf70b9655b",
            "file": "src/app/shared/services/session/local-storage.service.ts",
            "properties": [
                {
                    "name": "storage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Storage",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "StorageService"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Inject, Injectable } from '@angular/core';\r\nimport { StorageService } from './abstract-session.service';\r\n\r\n@Injectable()\r\nexport class LocalStorageService extends StorageService {\r\n\r\n  private storage: Storage;\r\n\r\n  constructor(@Inject('Window') private window: Window) {\r\n    super();\r\n    this.storage = this.window.localStorage;\r\n  }\r\n\r\n  getItem(name: string): string | null {\r\n    return this.storage.getItem(name);\r\n  }\r\n\r\n  setItem(name: string, data: string): void {\r\n    this.storage.setItem(name, data);\r\n  }\r\n\r\n  deleteItem(name: string): void {\r\n    this.storage.removeItem(name);\r\n  }\r\n\r\n  clear(): void {\r\n    this.storage.clear();\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 7,
                "jsdoctags": [
                    {
                        "name": "window",
                        "type": "Window",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": "StorageService",
            "type": "injectable"
        },
        {
            "name": "TranslocoHttpLoader",
            "id": "injectable-TranslocoHttpLoader-fbac7f851ecf43a9563d126dcff27d82dc556e456bcf190eab6d6b932f0a86a81f693b7aa11cf3cf51a1053559ec74a44f2fc4309d954a63de834c383057fdf5",
            "file": "src/app/transloco-root.module.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getTranslation",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport {\r\n  TRANSLOCO_LOADER,\r\n  Translation,\r\n  TranslocoLoader,\r\n  TRANSLOCO_CONFIG,\r\n  translocoConfig,\r\n  TranslocoModule\r\n} from '@ngneat/transloco';\r\nimport { Injectable, NgModule } from '@angular/core';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TranslocoHttpLoader implements TranslocoLoader {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTranslation(lang: string) {\r\n    return this.http.get<Translation>(`assets/i18n/${lang}.json`);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  exports: [ TranslocoModule ],\r\n  providers: [\r\n    {\r\n      provide: TRANSLOCO_CONFIG,\r\n      useValue: translocoConfig({\r\n        availableLangs: [\r\n          { id: 'en', label: 'EN' },\r\n          { id: 'ru', label: 'RU' }\r\n        ],\r\n        defaultLang: 'ru',\r\n        reRenderOnLangChange: true,\r\n        prodMode: environment.production,\r\n      })\r\n    },\r\n    {\r\n      provide: TRANSLOCO_LOADER,\r\n      useClass: TranslocoHttpLoader\r\n    }\r\n  ]\r\n})\r\nexport class TranslocoRootModule {}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 14,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-12e2556c412a115a571492c1a6677644794d5ee10b0fdadc969342d0069d5370502b4b3b4e7d918c9d421e204f3b791bf4cd5d5aa784c18604e458d9ea256ac7",
            "file": "src/app/guards/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<boolean>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { filter, Observable, tap } from 'rxjs';\r\nimport { AuthService } from '../shared/services/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private router: Router,\r\n  ) {}\r\n\r\n  canActivate(): Observable<boolean> {\r\n    return this.authService.isAuth$.pipe(\r\n      tap((isAuth: boolean) => {\r\n        if (!isAuth) {\r\n          this.router.navigate(['auth/login']);\r\n        }\r\n      }),\r\n    );\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 9,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "guard"
        }
    ],
    "interceptors": [],
    "classes": [
        {
            "name": "StorageService",
            "id": "class-StorageService-cb4f49df166435503a99f172072d3ea0c994f02a76622308755d3914de3d0590ce2c0bed3fdf0977608d742318e7fffe45f04d0fc393a8af6423d1b0461533c0",
            "file": "src/app/shared/services/session/abstract-session.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "class",
            "sourceCode": "export abstract class StorageService {\r\n  abstract clear(): void;\r\n  abstract getItem(name: string): string | null;\r\n  abstract setItem(name: string, data: any): void;\r\n  abstract deleteItem(name: string): void;\r\n}\r\n",
            "properties": [],
            "description": "<p>Abstract Session for all sessions</p>\n<p>The Session interface of the Web Session API provides access to a particular domain&#39;s session or local storage.\nIt allows, for example, the addition, modification, or deletion of stored data items.</p>\n",
            "rawdescription": "\n\nAbstract Session for all sessions\n\nThe Session interface of the Web Session API provides access to a particular domain's session or local storage.\nIt allows, for example, the addition, modification, or deletion of stored data items.\n",
            "methods": [
                {
                    "name": "clear",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ]
                },
                {
                    "name": "deleteItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setItem",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        126
                    ],
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "AutofocusDirective",
            "id": "directive-AutofocusDirective-5a2aa5c8d9f7cef4f36b8eff62103312a68cd252761dad6950ac82768869ab91207ff148ab103059da5dfe3f9c5241183de840d292c8f0fbd19fb5ed5bbf0b49",
            "file": "src/app/shared/directives/autofocus.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, OnInit } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[asfeAutofocus]'\r\n})\r\nexport class AutofocusDirective implements OnInit {\r\n  constructor(private elRef: ElementRef) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.elRef?.nativeElement) {\r\n      const native = this.elRef.nativeElement;\r\n      const el = native.localName === 'asfe-input' ? native.lastChild : native;\r\n      el.focus();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[asfeAutofocus]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "OnInit"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "elRef",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-688dee363b3c50873e2694efd67cd8b0e6dc8f84e23dabd2ea1df0f10ec9fec0efeab7215678523b3ce7c62681549913e86e5f9b4dd458efb20972e3d7c5b330",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-root",
            "styleUrls": [],
            "styles": [],
            "template": "<router-outlet></router-outlet>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'asfe-root',\r\n  template: `<router-outlet></router-outlet>`,\r\n})\r\nexport class AppComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "AuthComponent",
            "id": "component-AuthComponent-c9213914ba478a1ff4b4b1db541ef858fb372e4f47cdd88813035066878ab376947263833f6b066aa2e8fe0166e8d2654baab6767cf027e2af73f37f43062864",
            "file": "src/app/auth/auth.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-auth",
            "styleUrls": [
                "./auth.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./auth.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthService",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\n\r\n@Component({\r\n  selector: 'asfe-auth',\r\n  templateUrl: './auth.component.html',\r\n  styleUrls: ['./auth.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class AuthComponent {\r\n  constructor(public authService: AuthService) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/styles/colors.scss';\r\n\r\n:host {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  ::ng-deep {\r\n    asfe-button {\r\n      min-width: fit-content;\r\n      width: 100px;\r\n      height: 40px;\r\n      margin: 0 auto;\r\n      margin-top: 10px;\r\n    }\r\n\r\n    .question {\r\n      width: 100%;\r\n      padding-top: 10px;\r\n      text-align: center;\r\n      font-size: 12px;\r\n    }\r\n  }\r\n\r\n  .auth {\r\n    position: relative;\r\n    display: flex;\r\n    flex-direction: row;\r\n    width: 70%;\r\n    height: 80%;\r\n    max-width: 900px;\r\n    max-height: 500px;\r\n    border-radius: 10px;\r\n    overflow: hidden;\r\n    box-shadow: $box-shadow-color;\r\n\r\n\r\n    &--authorized {\r\n      .auth__column {\r\n        &--left {\r\n          width: 100%;\r\n        }\r\n\r\n        &--light {\r\n          width: 0%;\r\n        }\r\n      }\r\n\r\n      .auth__border {\r\n        left: calc(100% - 70px);\r\n      }\r\n    }\r\n\r\n    &__column {\r\n      width: 50%;\r\n      padding: 18px 20px;\r\n      background-color: $main-dark-color;\r\n      color: $main-dark-text-color;\r\n      transition: all .3s linear;\r\n\r\n      &--light {\r\n        background-color: $main-primary-color;\r\n        color: $main-primary-text-color;\r\n      }\r\n\r\n      &--left {\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: center;\r\n        align-items: center;\r\n        padding-right: 60px;\r\n      }\r\n\r\n      p {\r\n        margin-top: 20px;\r\n        text-align: center;\r\n      }\r\n    }\r\n\r\n    &__border {\r\n      position: absolute;\r\n      left: calc(50% - 27px);\r\n      height: 100%;\r\n      width: 30px;\r\n      overflow: hidden;\r\n      transition: all .3s linear;\r\n\r\n      svg {\r\n        width: 100%;\r\n        transform: scale(15) rotate(-180deg);\r\n        height: 114%;\r\n      }\r\n    }\r\n\r\n    ::ng-deep.form {\r\n      display: flex;\r\n      flex-direction: column;\r\n\r\n      h3 {\r\n        text-align: center;\r\n        font-size: 28px;\r\n        padding-bottom: 20px;\r\n      }\r\n\r\n      // &.form-login {\r\n\r\n      // }\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: #fff;\r\n    font-weight: 600;\r\n  }\r\n}\r\n\r\n.welcome-text {\r\n  text-align: center;\r\n  font-size: 32px;\r\n}\r\n",
                    "styleUrl": "./auth.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 10,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<section class=\"auth\">\r\n  <div class=\"auth__column auth__column--left\">\r\n    <ng-container *ngIf=\"authService.isAuth$ | async as isAuth; else authText\">\r\n      <h2 class=\"welcome-text\">Активный аккаунт - Iurii</h2>\r\n      <p>\r\n        <button (click)=\"authService.logout()\">Выйти</button>\r\n      </p>\r\n    </ng-container>\r\n  </div>\r\n  <div class=\"auth__border\">\r\n    <svg viewBox=\"0 0 1440 120\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <path\r\n          style=\"opacity:1; transform:rotate(90deg); transform-origin: center;\"\r\n          fill=\"#015f92\"\r\n          d=\"M0,24L13.3,26C26.7,28,53,32,80,46C106.7,60,133,84,160,80C186.7,76,213,44,240,38C266.7,32,293,52,320,68C346.7,84,373,96,400,86C426.7,76,453,44,480,42C506.7,40,533,68,560,68C586.7,68,613,40,640,36C666.7,32,693,52,720,64C746.7,76,773,80,800,84C826.7,88,853,92,880,80C906.7,68,933,40,960,28C986.7,16,1013,20,1040,22C1066.7,24,1093,24,1120,24C1146.7,24,1173,24,1200,38C1226.7,52,1253,80,1280,80C1306.7,80,1333,52,1360,46C1386.7,40,1413,56,1440,62C1466.7,68,1493,64,1520,58C1546.7,52,1573,44,1600,44C1626.7,44,1653,52,1680,52C1706.7,52,1733,44,1760,44C1786.7,44,1813,52,1840,56C1866.7,60,1893,60,1907,60L1920,60L1920,120L1906.7,120C1893.3,120,1867,120,1840,120C1813.3,120,1787,120,1760,120C1733.3,120,1707,120,1680,120C1653.3,120,1627,120,1600,120C1573.3,120,1547,120,1520,120C1493.3,120,1467,120,1440,120C1413.3,120,1387,120,1360,120C1333.3,120,1307,120,1280,120C1253.3,120,1227,120,1200,120C1173.3,120,1147,120,1120,120C1093.3,120,1067,120,1040,120C1013.3,120,987,120,960,120C933.3,120,907,120,880,120C853.3,120,827,120,800,120C773.3,120,747,120,720,120C693.3,120,667,120,640,120C613.3,120,587,120,560,120C533.3,120,507,120,480,120C453.3,120,427,120,400,120C373.3,120,347,120,320,120C293.3,120,267,120,240,120C213.3,120,187,120,160,120C133.3,120,107,120,80,120C53.3,120,27,120,13,120L0,120Z\"/>\r\n    </svg>\r\n  </div>\r\n  <div class=\"auth__column auth__column--light\">\r\n    <router-outlet></router-outlet>\r\n  </div>\r\n</section>\r\n\r\n<ng-template #authText>\r\n  <h2 class=\"welcome-text\">{{'auth.welcome-title' | transloco}}</h2>\r\n</ng-template>\r\n"
        },
        {
            "name": "BaseInputComponent",
            "id": "component-BaseInputComponent-aff5c46760518f6b0f40485158c28b789ba29e7df54af1604b0646f59f01a63134836f5eb95350d6bb3637f7ba82136fae214b689747aa1c83cbcd31d32ab21d",
            "file": "src/app/shared/components/input/base-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "styleUrls": [],
            "styles": [],
            "template": "",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ValidationErrors | null",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "typeChanged",
                    "defaultValue": "new EventEmitter<InputTypeEnum>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<InputTypeEnum>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_type",
                    "defaultValue": "InputTypeEnum.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "_val",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChangeFnType<T>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ]
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onInputValueChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "runOnTouch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, ValidationErrors } from '@angular/forms';\r\nimport { InputTypeEnum } from 'src/constants';\r\n\r\ntype OnChangeFnType<T> = (val: T | string | null) => void;\r\n\r\n@Component({template: ''})\r\nexport abstract class BaseInputComponent<T> implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() autocomplete: string = 'off';\r\n  @Input() placeholder: string = '';\r\n  @Input() autofocus: boolean = false;\r\n  @Input() error: ValidationErrors | null = null;\r\n  @Input() required: boolean = false;\r\n  @Output() typeChanged: EventEmitter<InputTypeEnum> = new EventEmitter<InputTypeEnum>();\r\n  public touched: boolean = false;\r\n  private _type: InputTypeEnum = InputTypeEnum.TEXT;\r\n\r\n  constructor() {\r\n\r\n  }\r\n\r\n  get type(): InputTypeEnum {\r\n    return this._type;\r\n  }\r\n\r\n  set type(val: InputTypeEnum) {\r\n    if (val) {\r\n      this._type = val;\r\n      this.typeChanged.emit(val);\r\n    }\r\n  }\r\n\r\n  private _val: T | null = null;\r\n\r\n  get value(): T {\r\n    return <T>this._val;\r\n  }\r\n\r\n  set value(val: T | null) {\r\n    if (val !== undefined) {\r\n      this._val = val;\r\n      if (this.onChange) {\r\n        this.onChange(val);\r\n      }\r\n    }\r\n  }\r\n\r\n  protected onChange: OnChangeFnType<T>;\r\n  public onTouch: () => void;\r\n\r\n  markAsTouched() {\r\n    if (!this.touched) {\r\n      this.runOnTouch();\r\n      this.touched = true;\r\n    }\r\n  }\r\n\r\n  onBlur(): void {\r\n    this.markAsTouched();\r\n    this.runOnTouch();\r\n  }\r\n\r\n  onInputValueChanges(event: Event): void {\r\n    const inputValue = (<HTMLInputElement>event.target).value as unknown as T;\r\n    this.writeValue(inputValue);\r\n  }\r\n\r\n  writeValue(obj: T | null): void {\r\n    this.value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: OnChangeFnType<T>): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  private runOnTouch(): void {\r\n    if (this.onTouch) {\r\n      this.onTouch();\r\n    }\r\n  }\r\n}\r\n\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 22
            },
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "type": {
                    "name": "type",
                    "setSignature": {
                        "name": "type",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "InputTypeEnum",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "InputTypeEnum",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "type",
                        "type": "",
                        "returnType": "InputTypeEnum",
                        "line": 28
                    }
                },
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 45,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T",
                        "line": 41
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-726f5465c1ee767f25d8c636baba3f5ee13125ba8162188cb3c1e7b821c4316ae851dbb3ec7aee73205ded966bfd51393d6c565ee253e3e9750c5db68eac7cd8",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "secondary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'asfe-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss']\r\n})\r\nexport class ButtonComponent {\r\n  @Input() label: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() secondary: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../assets/styles/colors.scss';\r\n\r\n:host {\r\n  .btn {\r\n    width: 100%;\r\n    min-width: 100px;\r\n    height: 100%;\r\n    min-height: 40px;\r\n    border: 0;\r\n    font-weight: bold;\r\n    padding: 0 15px;\r\n    border-radius: 4px;\r\n    background-color: $main-dark-color;\r\n    color: #ffffff;\r\n    cursor: pointer;\r\n    transition: .4s;\r\n\r\n    &:disabled {\r\n      color: #00000042;\r\n      background-color: #0000001f;\r\n      box-shadow: 0 0 #0003, 0 0 #00000024, 0 0 #0000001f;\r\n    }\r\n\r\n    &--secondary {\r\n      background-color: $main-light-color;\r\n\r\n      &:disabled {\r\n        color: $main-primary-color;\r\n        background-color: $main-light-color;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\r\n  class=\"btn\"\r\n  [class.btn--secondary]=\"secondary\"\r\n  type=\"button\"\r\n  [disabled]=\"disabled\"\r\n>\r\n  <ng-container *ngIf=\"!label; else labelTmpl\">\r\n    <ng-content></ng-content>\r\n  </ng-container>\r\n</button>\r\n\r\n<ng-template #labelTmpl>{{ label }}</ng-template>\r\n\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-dc126e21b41ed78f1f79c44d777e87a7bcd9ef91857251cf69050d4d2069eec8a3000a32760f721c08b782b1cd566f1bfa6dcc7a7a2390f9de93710917d807a9",
            "file": "src/app/shared/components/input/checkbox/checkbox.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "asfe-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ValidationErrors | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "typeChanged",
                    "defaultValue": "new EventEmitter<InputTypeEnum>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<InputTypeEnum>",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "_type",
                    "defaultValue": "InputTypeEnum.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "_val",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChangeFnType<T>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggle",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onInputValueChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "runOnTouch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BaseInputComponent } from '../base-input.component';\r\n\r\n@Component({\r\n  selector: 'asfe-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CheckboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class CheckboxComponent extends BaseInputComponent<boolean> implements OnInit {\r\n  ngOnInit(): void {\r\n    this.value = false;\r\n  }\r\n\r\n  toggle(): void {\r\n    const newValue = !this.value;\r\n    this.writeValue(newValue);\r\n    this.onChange(newValue);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "$slider-width: 35px;\r\n$slider-height: 20px;\r\n$slider-padding: 3px;\r\n$slider-child-size: $slider-height - $slider-padding*2;\r\n\r\n:host {\r\n  .checkbox {\r\n    display: flex;\r\n    align-items: center;\r\n\r\n    &-label {\r\n      padding: 5px 5px 5px 10px;\r\n      font-size: 12px;\r\n    }\r\n\r\n    &-slider {\r\n      position: relative;\r\n      width: $slider-width;\r\n      min-width: $slider-width;\r\n      height: $slider-height;\r\n      padding: $slider-padding;\r\n      border-radius: calc($slider-height / 2);\r\n      background-color: #ccc;\r\n      transition: .4s;\r\n      user-select: none;\r\n      cursor: pointer;\r\n\r\n      &::before {\r\n        content: '';\r\n        position: relative;\r\n        display: block;\r\n        width: $slider-child-size;\r\n        height: $slider-child-size;\r\n        border-radius: calc($slider-child-size / 2);\r\n        background-color: #ffffff;\r\n        transition: .4s;\r\n      }\r\n\r\n      &--active {\r\n        background-color: #04AA6D;\r\n\r\n        &::before {\r\n          transform: translateX(calc($slider-width - $slider-height));\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"checkbox\">\r\n  <div\r\n    [ngClass]=\"{\r\n      'checkbox-slider': true,\r\n      'checkbox-slider--active': value\r\n    }\"\r\n    (click)=\"toggle()\"\r\n  ></div>\r\n  <div class=\"checkbox-label\">{{label}}</div>\r\n</div>\r\n"
        },
        {
            "name": "ErrorComponent",
            "id": "component-ErrorComponent-9b342eec2f215108f479928f4c264fe486064dfd4ee580ecb5a0ce631e48d91a10d42d698e1f24acdd7e76826d7ae6f3a57259ba59748ff6cbe226d5839ba816",
            "file": "src/app/shared/components/input/error/error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-error",
            "styleUrls": [
                "./error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ValidationErrors",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { ValidationErrors } from '@angular/forms';\r\n\r\n@Component({\r\n  selector: 'asfe-error',\r\n  templateUrl: './error.component.html',\r\n  styleUrls: ['./error.component.scss']\r\n})\r\nexport class ErrorComponent {\r\n  @Input() errors: ValidationErrors;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/styles/_colors.scss';\r\n\r\n:host {\r\n  display: block;\r\n  padding: 0 5px;\r\n  color: $errors-color;\r\n  font-size: 12px;\r\n\r\n  .errors {\r\n    margin-top: -8px;\r\n    margin-bottom: 5px;\r\n    li {\r\n      text-align: right;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./error.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ul class=\"errors\">\r\n  <li *ngFor=\"let item of errors | errors | async\">\r\n    {{ item }}\r\n  </li>\r\n</ul>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-3460a95eca65965fdbcd71e75fa4cf3ba07b003f332a0b951115478848ce7333b9fa73febd7a4215cb026809e38a7748b46cfdc72d9bee5299ad1dafc58d8bda",
            "file": "src/app/shared/components/input/text/input.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "asfe-input",
            "styleUrls": [
                "./input.component.scss",
                "../base-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "inputType",
                    "defaultValue": "InputTypeEnum.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "InputTypeEnum",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ValidationErrors | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "typeChanged",
                    "defaultValue": "new EventEmitter<InputTypeEnum>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<InputTypeEnum>",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "isFloating",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "_type",
                    "defaultValue": "InputTypeEnum.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "_val",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChangeFnType<T>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onInputValueChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "runOnTouch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { InputTypeEnum } from 'src/constants';\r\nimport { BaseInputComponent } from '../base-input.component';\r\n\r\n@Component({\r\n  selector: 'asfe-input',\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss', '../base-input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class InputComponent extends BaseInputComponent<string> implements OnChanges {\r\n  @Input() inputType: InputTypeEnum = InputTypeEnum.TEXT;\r\n  isFloating = false;\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if(changes['inputType']) {\r\n      this.type = this.inputType;\r\n    }\r\n  }\r\n\r\n  blur(): void {\r\n    this.isFloating = false;\r\n    this.onBlur();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  &.ng-touched.ng-invalid {\r\n    .input input {\r\n      border: 1px solid red;\r\n    }\r\n  }\r\n\r\n  .input {\r\n    position: relative;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                },
                {
                    "data": "$input-padding: 15px;\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  height: 45px;\r\n  border: 0;\r\n  padding: 0 $input-padding;\r\n  padding-top: 5px;\r\n  margin-bottom: 10px;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  transition: .4s;\r\n  border: 1px solid transparent;\r\n\r\n  &::-moz-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &::-webkit-input-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &:focus {\r\n    &::-moz-placeholder {\r\n      color: #757575;\r\n    }\r\n\r\n    &::-webkit-input-placeholder {\r\n      color: #757575;\r\n    }\r\n  }\r\n}\r\n\r\nlabel {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: $input-padding;\r\n  transform: translateY(-50%);\r\n}\r\n",
                    "styleUrl": "../base-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"input\">\r\n  <asfe-label\r\n    [required]=\"required\"\r\n    [label]=\"label\"\r\n    [isFloat]=\"isFloating || !!value\"\r\n  ></asfe-label>\r\n  <input\r\n    [autofocus]=\"autofocus\"\r\n    [autocomplete]=\"autocomplete\"\r\n    [placeholder]=\"placeholder\"\r\n    [type]=\"type\"\r\n    (blur)=\"blur()\"\r\n    (focus)=\"isFloating = true\"\r\n    (input)=\"onInputValueChanges($event)\">\r\n</div>\r\n<asfe-error *ngIf=\"!!error && touched\" [errors]=\"error\"></asfe-error>\r\n"
        },
        {
            "name": "LabelComponent",
            "id": "component-LabelComponent-a7663deee9bef02a76a5699970c661104dab6e78523e51b2fe2a41d0e80846b064d55551bf6bd389dc6bdacbf58d52ca19c9509ddc70cdb3f803a0770c139de0",
            "file": "src/app/shared/components/input/label/label.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-label",
            "styleUrls": [
                "./label.component.scss",
                "../base-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./label.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "isFloat",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  Input,\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'asfe-label',\r\n  templateUrl: './label.component.html',\r\n  styleUrls: ['./label.component.scss', '../base-input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class LabelComponent {\r\n  @Input() label: string;\r\n  @Input() isFloat: boolean = false;\r\n  @Input() required: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import 'src/assets/styles/colors.scss';\r\n\r\n:host {\r\n  user-select: none;\r\n  pointer-events: none;\r\n}\r\n\r\nlabel {\r\n  user-select: none;\r\n  pointer-events: none;\r\n  color: #757575;\r\n  font-size: 14px;\r\n  transition: .4s;\r\n\r\n  &.floating {\r\n    top: 10px;\r\n    font-size: 12px;\r\n    color: $main-dark-color;\r\n    font-weight: 500;\r\n  }\r\n}\r\n",
                    "styleUrl": "./label.component.scss"
                },
                {
                    "data": "$input-padding: 15px;\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  height: 45px;\r\n  border: 0;\r\n  padding: 0 $input-padding;\r\n  padding-top: 5px;\r\n  margin-bottom: 10px;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  transition: .4s;\r\n  border: 1px solid transparent;\r\n\r\n  &::-moz-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &::-webkit-input-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &:focus {\r\n    &::-moz-placeholder {\r\n      color: #757575;\r\n    }\r\n\r\n    &::-webkit-input-placeholder {\r\n      color: #757575;\r\n    }\r\n  }\r\n}\r\n\r\nlabel {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: $input-padding;\r\n  transform: translateY(-50%);\r\n}\r\n",
                    "styleUrl": "../base-input.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<label\r\n  *ngIf=\"label\"\r\n  class=\"float-label\"\r\n  [class.floating]=\"isFloat\"\r\n>{{label}}{{required ? ' *' : ''}}</label>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-63758de26a0b7b80b2ef4224880711752f86fedfce23bd5e6bae38bd9b4eebddebaddab8ecb4dfbfc8ea662b1739c3a2ad2bc42f7dcfee4c869e19e8e8c0012c",
            "file": "src/app/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.initializeForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<LoginForm>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<LoginForm>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "login",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { LoginForm } from 'src/app/entities';\r\nimport { AuthService } from 'src/app/shared/services/auth.service';\r\nimport { AuthFormService } from './../services/auth-form.service';\r\n\r\n@Component({\r\n  selector: 'asfe-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent {\r\n  public form: FormGroup<LoginForm> = this.initializeForm();\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private authFormService: AuthFormService,\r\n  ) {\r\n  }\r\n\r\n  login(): void {\r\n    if (this.form.valid) {\r\n      this.authService.login();\r\n    }\r\n  }\r\n\r\n  private initializeForm(): FormGroup<LoginForm> {\r\n    return new FormGroup<LoginForm>({\r\n      login: this.authFormService.getLoginFormControl(),\r\n      password: this.authFormService.getPasswordFormControl(),\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authFormService",
                        "type": "AuthFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authFormService",
                        "type": "AuthFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form\r\n  novalidate\r\n  class=\"form form-login\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"login()\">\r\n  <h3>{{'auth.login-form-title' | transloco}}</h3>\r\n  <asfe-input\r\n    formControlName=\"login\"\r\n    [required]=\"true\"\r\n    [error]=\"form.controls['login'].errors\"\r\n    [label]=\"'auth.login-input-label' | transloco\"\r\n    [placeholder]=\"'auth.login-input-label' | transloco\"\r\n  ></asfe-input>\r\n  <asfe-password\r\n    formControlName=\"password\"\r\n    [required]=\"true\"\r\n    [showToggle]=\"true\"\r\n    [error]=\"form.controls['password'].errors\"\r\n    [label]=\"'auth.password-input-label' | transloco\"\r\n    [toggleText]=\"'auth.login-form-show-password' | transloco\"\r\n    [placeholder]=\"'auth.password-input-label' | transloco\"\r\n  ></asfe-password>\r\n  <asfe-button type=\"submit\" [disabled]=\"form.invalid\">\r\n    {{'auth.login-form-submit-btn-name' | transloco}}\r\n  </asfe-button>\r\n  <p class=\"question\">Еще нет аккаунта? <a routerLink=\"../registration\">Зарегистрироваться</a></p>\r\n</form>\r\n"
        },
        {
            "name": "PageNotFoundComponent",
            "id": "component-PageNotFoundComponent-269aebb777fb5ba78f937df8d53e9e79f9dc2fcc336b07b188b84198a1e8d7f8ca2a3aa20166e8dc67b730e1b77c534ef6652ef1e9f92e311a23ec1b3a06308c",
            "file": "src/app/components/page-not-found/page-not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-page-not-found",
            "styleUrls": [
                "./page-not-found.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./page-not-found.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'asfe-page-not-found',\r\n  templateUrl: './page-not-found.component.html',\r\n  styleUrls: ['./page-not-found.component.scss']\r\n})\r\nexport class PageNotFoundComponent {\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./page-not-found.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<p>Страница не найдена!</p>\r\n"
        },
        {
            "name": "PasswordComponent",
            "id": "component-PasswordComponent-0e189035bb5fe45b8db1d33a163ec34e00716e4436f4c0ef3dad966216436c68e1aacf10f723d3d6cfb8d405d8e68cea84950c61a52a5e331a9c97d685207396",
            "file": "src/app/shared/components/input/password/password.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "asfe-password",
            "styleUrls": [
                "./password.component.scss",
                "../base-input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./password.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "placeholder",
                    "defaultValue": "<string>InputTypeEnum.PASSWORD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "showToggle",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "toggleText",
                    "defaultValue": "'Show password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "autocomplete",
                    "defaultValue": "'off'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "autofocus",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "error",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "ValidationErrors | null",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "boolean",
                    "decorators": [],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "outputsClass": [
                {
                    "name": "typeChanged",
                    "defaultValue": "new EventEmitter<InputTypeEnum>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter<InputTypeEnum>",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "propertiesClass": [
                {
                    "name": "destroy$",
                    "defaultValue": "new Subject<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "isFloating",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "switcherControl",
                    "defaultValue": "new FormControl<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "_type",
                    "defaultValue": "InputTypeEnum.TEXT",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputTypeEnum",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "_val",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "OnChangeFnType<T>",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        122
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onTouch",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "methodsClass": [
                {
                    "name": "blur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "markAsTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onBlur",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "onInputValueChanges",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "OnChangeFnType<T>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "runOnTouch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "T | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ],
                    "inheritance": {
                        "file": "BaseInputComponent"
                    }
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  forwardRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { Subject, takeUntil } from 'rxjs';\r\nimport { InputTypeEnum } from 'src/constants';\r\nimport { BaseInputComponent } from '../base-input.component';\r\n\r\n@Component({\r\n  selector: 'asfe-password',\r\n  templateUrl: './password.component.html',\r\n  styleUrls: ['./password.component.scss', '../base-input.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => PasswordComponent),\r\n      multi: true\r\n    },\r\n  ]\r\n})\r\nexport class PasswordComponent extends BaseInputComponent<string> implements OnInit, OnDestroy {\r\n  @Input() showToggle = false;\r\n  @Input() toggleText = 'Show password';\r\n  @Input() override placeholder = <string>InputTypeEnum.PASSWORD;\r\n  isFloating = true;\r\n  switcherControl = new FormControl<boolean>(false);\r\n  destroy$ = new Subject<void>();\r\n\r\n  ngOnInit(): void {\r\n    this.type = InputTypeEnum.PASSWORD;\r\n    this.switcherControl.valueChanges\r\n      .pipe(takeUntil(this.destroy$))\r\n      .subscribe(isShow => {\r\n        this.type = isShow ? InputTypeEnum.TEXT : InputTypeEnum.PASSWORD;\r\n      });\r\n  }\r\n\r\n  blur(): void {\r\n    this.isFloating = false;\r\n    this.onBlur();\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.destroy$.next();\r\n    this.destroy$.complete();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\r\n  &.ng-touched.ng-invalid {\r\n    .password input {\r\n      border: 1px solid red;\r\n    }\r\n  }\r\n\r\n  .password {\r\n    position: relative;\r\n  }\r\n\r\n  .password-toggle {\r\n    display: flex;\r\n  }\r\n}\r\n",
                    "styleUrl": "./password.component.scss"
                },
                {
                    "data": "$input-padding: 15px;\r\n\r\ninput {\r\n  display: block;\r\n  width: 100%;\r\n  height: 45px;\r\n  border: 0;\r\n  padding: 0 $input-padding;\r\n  padding-top: 5px;\r\n  margin-bottom: 10px;\r\n  outline: none;\r\n  border-radius: 4px;\r\n  transition: .4s;\r\n  border: 1px solid transparent;\r\n\r\n  &::-moz-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &::-webkit-input-placeholder {\r\n    color: transparent;\r\n    transition: .4s;\r\n  }\r\n\r\n  &:focus {\r\n    &::-moz-placeholder {\r\n      color: #757575;\r\n    }\r\n\r\n    &::-webkit-input-placeholder {\r\n      color: #757575;\r\n    }\r\n  }\r\n}\r\n\r\nlabel {\r\n  position: absolute;\r\n  top: 50%;\r\n  left: $input-padding;\r\n  transform: translateY(-50%);\r\n}\r\n",
                    "styleUrl": "../base-input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": "BaseInputComponent",
            "implements": [
                "OnInit",
                "OnDestroy"
            ],
            "templateData": "<div class=\"password\">\r\n  <asfe-label\r\n    [label]=\"label\"\r\n    [required]=\"required\"\r\n    [isFloat]=\"isFloating || !!value\"\r\n  ></asfe-label>\r\n  <input\r\n    [type]=\"type\"\r\n    [value]=\"value\"\r\n    [autocomplete]=\"autocomplete\"\r\n    [placeholder]=\"placeholder\"\r\n    (blur)=\"blur()\"\r\n    (focus)=\"isFloating = true\"\r\n    (blur)=\"onTouch()\"\r\n    (input)=\"onInputValueChanges($event)\">\r\n</div>\r\n<asfe-error *ngIf=\"!!error && touched\" [errors]=\"error\"></asfe-error>\r\n\r\n<ng-content></ng-content>\r\n\r\n<div *ngIf=\"showToggle\" class=\"password-toggle\">\r\n  <asfe-checkbox [formControl]=\"switcherControl\" [label]=\"toggleText\"></asfe-checkbox>\r\n</div>\r\n\r\n\r\n"
        },
        {
            "name": "RegistrationComponent",
            "id": "component-RegistrationComponent-e9511a498cffdefbd6786ef0fb5928b4e3c5b6ed256c9b6cd0fd77f4382fc85b7d7e8d81f91162738948fea322bd2313529be097f3ba2e4c0c8692829731e97c",
            "file": "src/app/auth/registration/registration.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-registration",
            "styleUrls": [
                "./registration.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./registration.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "form",
                    "defaultValue": "this.initializeForm()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<RegistrationForm>",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "passwordInputType",
                    "defaultValue": "InputTypeEnum.PASSWORD",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [
                {
                    "name": "initializeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<RegistrationForm>",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "isSubmitDisabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "register",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AuthService } from './../../shared/services/auth.service';\r\nimport { Component } from '@angular/core';\r\nimport {\r\n  AbstractControl,\r\n  FormControl,\r\n  FormGroup,\r\n  ValidationErrors,\r\n  ValidatorFn,\r\n} from '@angular/forms';\r\nimport { InputTypeEnum } from 'src/constants';\r\nimport { AuthFormService } from '../services/auth-form.service';\r\nimport { RegistrationForm } from 'src/app/entities';\r\n\r\nexport function confirmPasswordValidator(passwordControl: FormControl<string | null>): ValidatorFn {\r\n  return ({ value }: AbstractControl): ValidationErrors | null => {\r\n    return passwordControl.value !== value ? { passwordConfirm: { value } } : null;\r\n  };\r\n}\r\n\r\n@Component({\r\n  selector: 'asfe-registration',\r\n  templateUrl: './registration.component.html',\r\n  styleUrls: ['./registration.component.scss']\r\n})\r\nexport class RegistrationComponent {\r\n  public form: FormGroup<RegistrationForm> = this.initializeForm();\r\n  passwordInputType = InputTypeEnum.PASSWORD;\r\n\r\n  constructor(\r\n    private authService: AuthService,\r\n    private authFormService: AuthFormService,\r\n  ) {}\r\n\r\n  register(): void {\r\n    if (this.form.valid) {\r\n      this.authService.register();\r\n    }\r\n  }\r\n\r\n  isSubmitDisabled(): boolean {\r\n    return this.form.invalid || !this.form.value.privacyPolicy;\r\n  }\r\n\r\n  private initializeForm(): FormGroup<RegistrationForm> {\r\n    const password = this.authFormService.getPasswordFormControl();\r\n    const passwordConfirm = this.authFormService.getPasswordConfirmControl(confirmPasswordValidator(password));\r\n    return new FormGroup<RegistrationForm>({\r\n      login: this.authFormService.getLoginFormControl(),\r\n      password,\r\n      passwordConfirm,\r\n      privacyPolicy: this.authFormService.getPrivacyPolicyFormControl(),\r\n      offersInformation: this.authFormService.getPrivacyPolicyFormControl(),\r\n    });\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./registration.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authFormService",
                        "type": "AuthFormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authFormService",
                        "type": "AuthFormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<form\r\n  novalidate\r\n  class=\"form form-login\"\r\n  [formGroup]=\"form\"\r\n  (ngSubmit)=\"register()\">\r\n  <h3>{{'auth.registration-form-title' | transloco}}</h3>\r\n  <asfe-input\r\n    formControlName=\"login\"\r\n    [required]=\"true\"\r\n    [label]=\"'auth.login-input-label' | transloco\"\r\n    [placeholder]=\"'auth.login-input-label' | transloco\"\r\n    [error]=\"form.controls['login'].errors\"\r\n  ></asfe-input>\r\n  <asfe-password\r\n    formControlName=\"password\"\r\n    [required]=\"true\"\r\n    [label]=\"'auth.password-input-label' | transloco\"\r\n    [showToggle]=\"true\"\r\n    [toggleText]=\"'auth.login-form-show-password' | transloco\"\r\n    [placeholder]=\"'auth.password-input-label' | transloco\"\r\n    [error]=\"form.controls['password'].errors\"\r\n    (typeChanged)=\"passwordInputType = $event\">\r\n      <asfe-input\r\n        formControlName=\"passwordConfirm\"\r\n        [required]=\"true\"\r\n        [inputType]=\"passwordInputType\"\r\n        [label]=\"'auth.password-confirm-label' | transloco\"\r\n        [placeholder]=\"'auth.password-confirm-label' | transloco\"\r\n        [error]=\"form.controls['passwordConfirm'].errors\"\r\n      ></asfe-input>\r\n  </asfe-password>\r\n  <asfe-checkbox\r\n    formControlName=\"privacyPolicy\"\r\n    [required]=\"true\"\r\n    [label]=\"'auth.login-form-privacy-policy-text' | transloco\"\r\n  ></asfe-checkbox>\r\n  <asfe-button\r\n    type=\"submit\"\r\n    [disabled]=\"isSubmitDisabled()\"\r\n  >{{'auth.registration-form-submit-btn-name' | transloco}}</asfe-button>\r\n  <p class=\"question\">Уже есть аккаунт? <a routerLink=\"../login\">Войти</a></p>\r\n</form>\r\n"
        },
        {
            "name": "ViewComponent",
            "id": "component-ViewComponent-c601d268e94376cc81cb23ae183c6b94b5805b43c3672998ebd494e32cf13f492cc63dba2134bb6f99eb5f35f450a7f004365ca4aee256ebfcb0712a836cbbd0",
            "file": "src/app/core/view/view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "asfe-view",
            "styleUrls": [
                "./view.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./view.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'asfe-view',\r\n  templateUrl: './view.component.html',\r\n  styleUrls: ['./view.component.scss']\r\n})\r\nexport class ViewComponent {\r\n  constructor() { }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "templateData": "<header>Шапка</header>\r\n  <section>\r\n    <router-outlet></router-outlet>\r\n  </section>\r\n<footer>подвал</footer>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-ec902fc3eff81fc7cbfb29d6e355648598b1ccc907bb041c5df130716968b089f3cd34af7bbd5a8be766c95dba4fd7c595e417fdcadd2a51aa67f9f8fb4be11b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClientModule } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { TranslocoRootModule } from './transloco-root.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    HttpClientModule,\r\n    TranslocoRootModule,\r\n    SharedModule,\r\n    AppRoutingModule,\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        },
                        {
                            "name": "TranslocoRootModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-e42d472ef955b17783573e34e62f7e96a266525527b74585b14c2305386bc799795cf0fc41a7d24166574f63c533c019b6f54cbf2a515194f0244f33e8e15cf3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { AuthGuard } from './guards/auth.guard';\r\nimport { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { PageNotFoundComponent } from './components/page-not-found/page-not-found.component';\r\nimport { AppPreloadingStrategyService } from './shared/services/app-preloading-strategy.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    canActivate: [AuthGuard],\r\n    loadChildren: () => \"import('./core/core.module').then(m => m.CoreModule)\",\r\n    data: {\r\n      preload: true,\r\n    }\r\n  },\r\n  {\r\n    path: 'auth',\r\n    loadChildren: () => \"import('./auth/auth.module').then(m => m.AuthModule)\",\r\n  },\r\n  { path: '**', component: PageNotFoundComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes, {\r\n    preloadingStrategy: AppPreloadingStrategyService,\r\n  })],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-0f27d05700ba039c82d2d0e7af94dcb3e404e678fdcbe90eaf9bc1c53fe77f850a04dba083fdde94a5dd6331dda1b088d648a32b94bac158a8a1184c38c526aa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { SharedModule } from './../shared/shared.module';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegistrationComponent } from './registration/registration.component';\r\nimport { AuthComponent } from './auth.component';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslocoModule } from '@ngneat/transloco';\r\nimport { AuthFormService } from './services/auth-form.service';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AuthComponent,\r\n    children: [\r\n      { path: '', redirectTo: 'login', pathMatch: 'full'},\r\n      { path: 'login', component: LoginComponent },\r\n      { path: 'registration', component: RegistrationComponent },\r\n    ]\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AuthComponent,\r\n    LoginComponent,\r\n    RegistrationComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    RouterModule.forChild(routes),\r\n    SharedModule,\r\n    TranslocoModule,\r\n  ],\r\n  providers: [AuthFormService],\r\n})\r\nexport class AuthModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthFormService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AuthComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "RegistrationComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-3b64b97387f82e5b79ed47ea34badf6afa531c781035c7daa7a361351a890f1444b03eda7de2a8051d7bfa9669876c747e5939faea32b4d496807f5e4970e3bd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { ViewComponent } from './view/view.component';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: ViewComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ViewComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    RouterModule.forChild(routes),\r\n  ]\r\n})\r\nexport class CoreModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-c9076ea7f4459cc05af9490f1e2a352bb72f2bc6f951fd4786f21ea69e55dffd365b596b4106f911e4f46eff3fc0b7bccd6ba98ee0fb2f68c9ede0eba6b4d1ac",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { ReactiveFormsModule } from '@angular/forms';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AuthService } from './services/auth.service';\r\nimport { LocalStorageService } from './services/session/local-storage.service';\r\nimport { StorageService } from './services/session/abstract-session.service';\r\nimport { AppPreloadingStrategyService } from './services/app-preloading-strategy.service';\r\nimport { InputComponent } from './components/input/text/input.component';\r\nimport { PasswordComponent } from './components/input/password/password.component';\r\nimport { ButtonComponent } from './components/button/button.component';\r\nimport { CheckboxComponent } from './components/input/checkbox/checkbox.component';\r\nimport { LabelComponent } from './components/input/label/label.component';\r\nimport { AutofocusDirective } from './directives/autofocus.directive';\r\nimport { ErrorComponent } from './components/input/error/error.component';\r\nimport { ErrorsPipe } from './pipes/error.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    InputComponent,\r\n    PasswordComponent,\r\n    ButtonComponent,\r\n    CheckboxComponent,\r\n    LabelComponent,\r\n    AutofocusDirective,\r\n    ErrorComponent,\r\n    ErrorsPipe,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  exports: [\r\n    InputComponent,\r\n    PasswordComponent,\r\n    ButtonComponent,\r\n    CheckboxComponent,\r\n    AutofocusDirective,\r\n    ErrorsPipe,\r\n  ],\r\n  providers: [\r\n    AuthService,\r\n    AppPreloadingStrategyService,\r\n    {\r\n      provide: StorageService,\r\n      useClass: LocalStorageService,\r\n    },\r\n    {\r\n      provide: 'Window',\r\n      useValue: window\r\n    },\r\n  ],\r\n})\r\nexport class SharedModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AppPreloadingStrategyService"
                        },
                        {
                            "name": "AuthService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AutofocusDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ErrorComponent"
                        },
                        {
                            "name": "ErrorsPipe"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LabelComponent"
                        },
                        {
                            "name": "PasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "AutofocusDirective"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "ErrorsPipe"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "PasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TranslocoRootModule",
            "id": "module-TranslocoRootModule-fbac7f851ecf43a9563d126dcff27d82dc556e456bcf190eab6d6b932f0a86a81f693b7aa11cf3cf51a1053559ec74a44f2fc4309d954a63de834c383057fdf5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/transloco-root.module.ts",
            "methods": [],
            "sourceCode": "import { HttpClient } from '@angular/common/http';\r\nimport {\r\n  TRANSLOCO_LOADER,\r\n  Translation,\r\n  TranslocoLoader,\r\n  TRANSLOCO_CONFIG,\r\n  translocoConfig,\r\n  TranslocoModule\r\n} from '@ngneat/transloco';\r\nimport { Injectable, NgModule } from '@angular/core';\r\nimport { environment } from '../environments/environment';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class TranslocoHttpLoader implements TranslocoLoader {\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getTranslation(lang: string) {\r\n    return this.http.get<Translation>(`assets/i18n/${lang}.json`);\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  exports: [ TranslocoModule ],\r\n  providers: [\r\n    {\r\n      provide: TRANSLOCO_CONFIG,\r\n      useValue: translocoConfig({\r\n        availableLangs: [\r\n          { id: 'en', label: 'EN' },\r\n          { id: 'ru', label: 'RU' }\r\n        ],\r\n        defaultLang: 'ru',\r\n        reRenderOnLangChange: true,\r\n        prodMode: environment.production,\r\n      })\r\n    },\r\n    {\r\n      provide: TRANSLOCO_LOADER,\r\n      useClass: TranslocoHttpLoader\r\n    }\r\n  ]\r\n})\r\nexport class TranslocoRootModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<CheckboxComponent>",
                "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<InputComponent>",
                "defaultValue": "(args: InputComponent) => ({\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Password.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<PasswordComponent>",
                "defaultValue": "(args: PasswordComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [
            {
                "name": "confirmPasswordValidator",
                "file": "src/app/auth/registration/registration.component.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "passwordControl",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "ValidatorFn",
                "jsdoctags": [
                    {
                        "name": "passwordControl",
                        "type": "FormControl",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "OnChangeFnType",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/app/shared/components/input/base-input.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 178
            }
        ],
        "enumerations": [
            {
                "name": "AuthEnum",
                "childs": [
                    {
                        "name": "LOGIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "login"
                    },
                    {
                        "name": "REGISTRATION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "registration"
                    },
                    {
                        "name": "DEFAULT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "default"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/entities/auth.ts"
            },
            {
                "name": "InputTypeEnum",
                "childs": [
                    {
                        "name": "TEXT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "text"
                    },
                    {
                        "name": "PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "password"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants.ts"
            },
            {
                "name": "StorageKeysEnum",
                "childs": [
                    {
                        "name": "AUTHENTICATION",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "AUTHENTICATION"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/constants.ts"
            }
        ],
        "groupedVariables": {
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/stories/Checkbox.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<CheckboxComponent>",
                    "defaultValue": "(args: CheckboxComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\n  props: args,\n})"
                }
            ],
            "src/stories/Input.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<InputComponent>",
                    "defaultValue": "(args: InputComponent) => ({\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Password.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Password.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<PasswordComponent>",
                    "defaultValue": "(args: PasswordComponent) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/auth/registration/registration.component.ts": [
                {
                    "name": "confirmPasswordValidator",
                    "file": "src/app/auth/registration/registration.component.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "passwordControl",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "ValidatorFn",
                    "jsdoctags": [
                        {
                            "name": "passwordControl",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/entities/auth.ts": [
                {
                    "name": "AuthEnum",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "login"
                        },
                        {
                            "name": "REGISTRATION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "registration"
                        },
                        {
                            "name": "DEFAULT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "default"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/entities/auth.ts"
                }
            ],
            "src/constants.ts": [
                {
                    "name": "InputTypeEnum",
                    "childs": [
                        {
                            "name": "TEXT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "text"
                        },
                        {
                            "name": "PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "password"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants.ts"
                },
                {
                    "name": "StorageKeysEnum",
                    "childs": [
                        {
                            "name": "AUTHENTICATION",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "AUTHENTICATION"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/constants.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/components/input/base-input.component.ts": [
                {
                    "name": "OnChangeFnType",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/app/shared/components/input/base-input.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 178
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "canActivate": [
                            "AuthGuard"
                        ],
                        "loadChildren": "./core/core.module#CoreModule",
                        "data": {
                            "preload": true
                        },
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/core/core.module.ts",
                                        "module": "CoreModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "ViewComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CoreModule"
                            }
                        ]
                    },
                    {
                        "path": "auth",
                        "loadChildren": "./auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [],
                                "module": "AuthModule"
                            }
                        ]
                    },
                    {
                        "path": "**",
                        "component": "PageNotFoundComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/auth.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AuthComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/registration/registration.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/registration/registration.component.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "confirmPasswordValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/auth/services/auth-form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthFormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page-not-found/page-not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageNotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/view/view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFormControlValidatorsConfig",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/auth.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegistrationForm",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/entities/utils.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Dictionary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/guards/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/base-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/error/error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/label/label.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LabelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/password/password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/text/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/autofocus.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "AutofocusDirective",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/pipes/error.pipe.ts",
                "type": "pipe",
                "linktype": "pipe",
                "name": "ErrorsPipe",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/app-preloading-strategy.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppPreloadingStrategyService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/session/abstract-session.service.ts",
                "type": "class",
                "linktype": "classe",
                "name": "StorageService",
                "coveragePercent": 20,
                "coverageCount": "1/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/session/local-storage.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LocalStorageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/transloco-root.module.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TranslocoHttpLoader",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Password.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}